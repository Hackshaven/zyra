default:
  image: python:3.11

stages:
  - test
  - package
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pypoetry"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

cache:
  paths:
    - .cache/pip
    - .cache/pytest_cache
    - .cache/pypoetry
    - .venv

before_script:
  - echo "Starting CI/CD Pipeline"
  - apt-get update && apt-get install -y python3-toml
  - pip install poetry
  - export PATH="$HOME/.poetry/bin:$PATH"
  - poetry config virtualenvs.in-project true
  - poetry install

linting:
  stage: test
  tags:
    - docker
  script:
    - echo "Running formatting and linting with ruff"
    - poetry run ruff format --check --verbose src tests
    - poetry run ruff check --output-format=gitlab src tests

testing:
  stage: test
  tags:
    - docker
  script:
    - echo "Running tests"
    - poetry run coverage run -m pytest -m "not integration" --junitxml report.xml
    - poetry run coverage run
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    when: always
    paths:
      - report.xml
      - coverage.xml
    # https://docs.gitlab.com/ee/ci/yaml/index.html#artifactsexpire_in
    expire_in: 2 week
      # https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html
    reports:
      junit:
      - report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

packaging:
  stage: package
  needs: ["linting", "testing"]
  tags:
    - docker
  script:
    - poetry build
  artifacts:
    paths:
      - dist/

deploy:
  stage: deploy
  needs: ["packaging"]
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.rtvideo'
  when: manual
  tags:
    - docker
  before_script:
    - apk add --no-cache openssh
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp dist/rtvideo-*.tar.gz $SSH_USER@$SSH_HOST:/tmp/rtvideo.tar.gz
    - scp .rtvideo/credentials $SSH_USER@$SSH_HOST:~/.rtvideo
    - ssh $SSH_USER@$SSH_HOST "$VENV/bin/pip install /tmp/rtvideo.tar.gz"
    - |-
            sed -e 's@{{ VENV }}@'"$VENV"'@g' config/real-time-video.cron |
            ssh $WOC_SSH_USER@$WOC_DATA_SOS_HOST '
              cat > crontab/real-time-video.cron
              cat crontab/*.cron | crontab -
              chmod 600 ~/.rtvideo/credentials'
  only:
    - main
