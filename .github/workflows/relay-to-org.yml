name: Relay Codex PRs to NOAA-GSL/zyra

on:
  pull_request:
    types: [opened, reopened, synchronize, edited, closed]
    branches:
      - mirror/staging

permissions:
  contents: read
  pull-requests: write

# Prevent overlapping runs for the same PR
concurrency:
  group: relay-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  relay:
    name: Mirror PR to org (create/update/close)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Skip PRs from forks (secrets not available there)
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}

    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "relay-bot"
          git config user.email "relay-bot@example.com"

      - name: Ensure upstream staging exists
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          git ls-remote https://x-access-token:${ORG_TOKEN}@github.com/NOAA-GSL/zyra.git refs/heads/staging | grep -q . || \
            (echo "::error ::NOAA-GSL/zyra:staging not found" && exit 1)

      - name: Add upstream NOAA-GSL/zyra and fetch base
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          git remote add upstream https://x-access-token:${ORG_TOKEN}@github.com/NOAA-GSL/zyra.git
          git fetch upstream staging

      - name: Rebase onto org staging (fail loudly if conflict)
        run: |
          set -e
          git rebase upstream/staging || (git rebase --abort && echo "::error ::Rebase conflict; resolve upstream divergences" && exit 1)

      - name: Push relay branch to org
        if: ${{ github.event.action != 'closed' }}
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          RELAY_BRANCH="relay/hh-pr-${{ github.event.pull_request.number }}"
          git push https://x-access-token:${ORG_TOKEN}@github.com/NOAA-GSL/zyra.git HEAD:${RELAY_BRANCH} --force-with-lease
          echo "RELAY_BRANCH=${RELAY_BRANCH}" >> $GITHUB_ENV

      - name: Create or update PR in org
        if: ${{ github.event.action != 'closed' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_PAT_ORG }}
          script: |
            const relayBranch = process.env.RELAY_BRANCH;
            const owner = 'NOAA-GSL';
            const repo  = 'zyra';
            const base  = 'staging';
            const srcPR = context.payload.pull_request;
            const title = `Codex Relay: HacksHaven PR #${srcPR.number} â€” ${srcPR.title}`;
            const body  = `Mirrored from **HacksHaven/zyra** PR #${srcPR.number}\n\nSource: ${srcPR.html_url}\n\n> This PR is maintained by an automated relay. Changes should be made in the original HH PR.`;

            // find existing open PR from this relay branch
            const existing = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', head: `${owner}:${relayBranch}`
            });

            if (existing.length > 0) {
              await github.rest.pulls.update({
                owner, repo, pull_number: existing[0].number, title, body
              });
              core.info(`Updated org PR #${existing[0].number}`);
            } else {
              const pr = await github.rest.pulls.create({ owner, repo, head: relayBranch, base, title, body });
              core.info(`Created org PR ${pr.data.html_url}`);
            }

      - name: Close matching org PR when HH PR closes
        if: ${{ github.event.action == 'closed' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_PAT_ORG }}
          script: |
            const owner = 'NOAA-GSL';
            const repo  = 'zyra';
            const relayBranch = `relay/hh-pr-${context.payload.number}`;
            const prs = await github.paginate(github.rest.pulls.list, {
              owner, repo, state: 'open', head: `${owner}:${relayBranch}`
            });
            for (const pr of prs) {
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, state: 'closed' });
              core.info(`Closed org PR #${pr.number} because HH PR was closed.`);
            }
