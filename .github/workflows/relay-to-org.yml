# .github/workflows/relay-to-org.yml
name: Relay Codex PRs to NOAA-GSL/zyra

on:
  # Auto: run when a PR targets a mirror branch (base = mirror/staging by default)
  pull_request_target:
    types: [opened, reopened, synchronize, edited, closed]
    branches:
      - mirror/staging
      # - 'mirror/**'   # uncomment to allow all mirror bases

  # Manual: run from Actions tab with (optional) PR number
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Downstream PR number in HacksHaven/zyra (optional: will pick latest open mirror/* PR if empty)"
        required: false
        type: number

permissions:
  contents: read
  pull-requests: write

concurrency:
  # Force string using format() to avoid linter errors about int vs string
  group: ${{ format('relay-{0}-{1}', github.event_name, github.event.inputs.pr_number || github.event.pull_request.number) }}
  cancel-in-progress: true

env:
  ORG_OWNER: NOAA-GSL
  ORG_REPO: zyra

jobs:
  relay:
    name: Mirror PR to org (create/update/close)
    runs-on: ubuntu-latest
    timeout-minutes: 12

    steps:
      # -------- Resolve PR context for both triggers (auto + manual) --------
      - name: Resolve PR context
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const isManual = context.eventName === 'workflow_dispatch';
            let pr;

            if (isManual) {
              const raw = core.getInput('pr_number', { required: false });
              if (raw) {
                const prNumber = Number(raw);
                const { data } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                pr = data;
              } else {
                // pick the latest open PR targeting mirror/*
                const list = await github.paginate(github.rest.pulls.list, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  per_page: 50
                });
                pr = list.find(p => p.base && p.base.ref && p.base.ref.startsWith('mirror/'));
                if (!pr) {
                  core.setFailed("No open PRs found targeting 'mirror/*'. Provide pr_number when running manually.");
                  return;
                }
              }
            } else {
              pr = context.payload.pull_request;
            }

            // Fork guard: require same-repo PR (secrets unavailable for forks)
            const sameRepo = pr.head.repo.full_name === `${context.repo.owner}/${context.repo.repo}`;
            if (!sameRepo) {
              core.setFailed(`PR head repo ${pr.head.repo.full_name} is not this repository; cannot access secrets.`);
              return;
            }

            if (!pr.base || !pr.base.ref.startsWith('mirror/')) {
              core.setFailed(`Base branch '${pr.base?.ref}' is not a mirror/* branch.`);
              return;
            }

            core.setOutput('pr_number', String(pr.number));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('head_repo', pr.head.repo.full_name);
            core.setOutput('is_closed', String(pr.state === 'closed'));
            core.info(`Relay context ‚Üí PR #${pr.number} ${pr.head.repo.full_name}:${pr.head.ref} -> ${pr.base.ref}`);

      # -------- Checkout the PR head (for pull_request_target we must specify repo/ref) --------
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.ctx.outputs.head_repo }}
          ref: ${{ steps.ctx.outputs.head_sha }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "relay-bot"
          git config user.email "relay-bot@example.com"

      - name: Ensure upstream staging exists
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          git ls-remote "https://x-access-token:${ORG_TOKEN}@github.com/${{ env.ORG_OWNER }}/${{ env.ORG_REPO }}.git" refs/heads/staging | grep -q . || \
            (echo "::error ::${{ env.ORG_OWNER }}/${{ env.ORG_REPO }}:staging not found" && exit 1)

      - name: Add upstream and fetch base
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          git remote add upstream "https://x-access-token:${ORG_TOKEN}@github.com/${{ env.ORG_OWNER }}/${{ env.ORG_REPO }}.git"
          git fetch upstream staging

      - name: Rebase onto org staging
        id: rebase
        run: |
          set -e
          if ! git rebase upstream/staging; then
            git rebase --abort
            echo "conflict=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment on rebase conflict (downstream PR)
        if: steps.rebase.outputs.conflict == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.ctx.outputs.pr_number }}')
            const body = `‚ùå Relay rebase failed on **${process.env.ORG_OWNER}/${process.env.ORG_REPO}:staging**.\n\nPlease rebase this branch onto \`mirror/staging\` and push again. The relay will retry automatically.`
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body })
            core.setFailed('Rebase conflict')

      - name: Push relay branch to org
        if: ${{ steps.rebase.outputs.conflict != 'true' && steps.ctx.outputs.is_closed != 'true' }}
        env:
          ORG_TOKEN: ${{ secrets.SYNC_PAT_ORG }}
        run: |
          set -euo pipefail
          RELAY_BRANCH="relay/hh-pr-${{ steps.ctx.outputs.pr_number }}"
          git push "https://x-access-token:${ORG_TOKEN}@github.com/${{ env.ORG_OWNER }}/${{ env.ORG_REPO }}.git" HEAD:${RELAY_BRANCH} --force-with-lease
          echo "RELAY_BRANCH=${RELAY_BRANCH}" >> $GITHUB_ENV

      - name: Create or update PR in org
        if: ${{ steps.rebase.outputs.conflict != 'true' && steps.ctx.outputs.is_closed != 'true' }}
        id: upsert
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_PAT_ORG }}
          script: |
            const relayBranch = process.env.RELAY_BRANCH;
            const owner = process.env.ORG_OWNER;
            const repo  = process.env.ORG_REPO;
            const base  = 'staging';
            const prNumber = Number('${{ steps.ctx.outputs.pr_number }}');

            // Load downstream PR to reuse title/body
            const { data: srcPR } = await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: prNumber
            });
            const title = `Codex Relay: ${context.repo.owner}/${context.repo.repo} PR #${prNumber} ‚Äî ${srcPR.title}`;
            const body  = `Mirrored from **${context.repo.owner}/${context.repo.repo}** PR #${prNumber}\n\nSource: ${srcPR.html_url}\n\n> This PR is maintained by an automated relay. Changes should be made in the original HH PR.`;

            const existing = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', head: `${owner}:${relayBranch}` });
            let url;
            if (existing.length > 0) {
              await github.rest.pulls.update({ owner, repo, pull_number: existing[0].number, title, body });
              url = existing[0].html_url;
            } else {
              const pr = await github.rest.pulls.create({ owner, repo, head: relayBranch, base, title, body });
              url = pr.data.html_url;
            }
            core.setOutput('org_pr_url', url);

      - name: Comment upstream PR link on downstream PR
        if: ${{ steps.upsert.outputs.org_pr_url }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.ctx.outputs.pr_number }}')
            const url = '${{ steps.upsert.outputs.org_pr_url }}'
            const body = `üîÅ Relay created/updated upstream PR: ${url}`
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body })

      - name: Close matching org PR when HH PR closes
        if: ${{ steps.ctx.outputs.is_closed == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SYNC_PAT_ORG }}
          script: |
            const owner = process.env.ORG_OWNER;
            const repo  = process.env.ORG_REPO;
            const prNumber = Number('${{ steps.ctx.outputs.pr_number }}')
            const relayBranch = `relay/hh-pr-${prNumber}`;
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', head: `${owner}:${relayBranch}` });
            for (const pr of prs) {
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, state: 'closed' });
              core.info(`Closed org PR #${pr.number} because HH PR #${prNumber} was closed.`)
